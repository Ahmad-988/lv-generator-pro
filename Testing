# Testing, CI/CD und Production Setup

## üß™ Testing Setup

### Backend Testing

#### Jest Konfiguration (backend/jest.config.js)

```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  testMatch: ['**/__tests__/**/*.ts', '**/*.test.ts'],
  collectCoverageFrom: [
    'src/**/*.ts',
    '!src/**/*.d.ts',
    '!src/server.ts',
    '!src/**/__tests__/**'
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    }
  },
  setupFilesAfterEnv: ['<rootDir>/src/__tests__/setup.ts'],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1'
  }
};
```

#### Test Setup (backend/src/__tests__/setup.ts)

```typescript
import { PrismaClient } from '@prisma/client';
import { mockDeep, mockReset, DeepMockProxy } from 'jest-mock-extended';

import prisma from '../lib/prisma';

jest.mock('../lib/prisma', () => ({
  __esModule: true,
  default: mockDeep<PrismaClient>()
}));

beforeEach(() => {
  mockReset(prismaMock);
});

export const prismaMock = prisma as unknown as DeepMockProxy<PrismaClient>;
```

#### Unit Test Beispiel (backend/src/__tests__/services/priceService.test.ts)

```typescript
import { PriceCalculationService } from '../../services/priceService';
import { prismaMock } from '../setup';

describe('PriceCalculationService', () => {
  let service: PriceCalculationService;

  beforeEach(() => {
    service = new PriceCalculationService(prismaMock);
  });

  describe('calculatePrice', () => {
    it('should calculate price based on historical data', async () => {
      const mockHistoricalPrices = [
        { id: '1', price: 45.00, region: 'M√ºnchen' },
        { id: '2', price: 47.00, region: 'M√ºnchen' },
        { id: '3', price: 44.00, region: 'M√ºnchen' }
      ];

      prismaMock.priceHistory.findMany.mockResolvedValue(mockHistoricalPrices);

      const position = {
        kurzbeschreibung: 'Trockenbau',
        einheit: 'm¬≤',
        gewerk: 'Trockenbau'
      };

      const factors = {
        region: 'M√ºnchen',
        strategy: 'markt√ºblich' as const,
        complexity: 'mittel' as const,
        urgency: false
      };

      const result = await service.calculatePrice(position, factors);

      expect(result.price).toBeCloseTo(57.5, 2); // (45+47+44)/3 * 1.25 (M√ºnchen-Faktor)
      expect(result.confidence).toBe(0.9);
    });

    it('should use fallback prices when no historical data', async () => {
      prismaMock.priceHistory.findMany.mockResolvedValue([]);

      const position = {
        kurzbeschreibung: 'Malerarbeiten',
        einheit: 'm¬≤',
        gewerk: 'Malerarbeiten'
      };

      const factors = {
        region: 'Berlin',
        strategy: 'g√ºnstig' as const,
        complexity: 'einfach' as const,
        urgency: false
      };

      const result = await service.calculatePrice(position, factors);

      expect(result.price).toBeCloseTo(9.33, 2); // 12 * 0.85 * 0.9 * 1.08
      expect(result.confidence).toBe(0.7);
    });
  });
});
```

#### Integration Test (backend/src/__tests__/integration/project.test.ts)

```typescript
import request from 'supertest';
import { app } from '../../server';
import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();

describe('Project API', () => {
  let authToken: string;
  let userId: string;

  beforeAll(async () => {
    await prisma.$connect();
    
    // Create test user
    const user = await prisma.user.create({
      data: {
        email: 'test@example.com',
        password: 'hashedPassword',
        companyName: 'Test Company'
      }
    });
    
    userId = user.id;
    authToken = jwt.sign(
      { userId: user.id, email: user.email, role: 'user' },
      process.env.JWT_SECRET!
    );
  });

  afterAll(async () => {
    await prisma.user.delete({ where: { id: userId } });
    await prisma.$disconnect();
  });

  describe('POST /api/projects', () => {
    it('should create a new project', async () => {
      const projectData = {
        name: 'Test Project',
        location: 'M√ºnchen',
        timeframe: '01.08.2025 - 31.12.2025'
      };

      const response = await request(app)
        .post('/api/projects')
        .set('Authorization', `Bearer ${authToken}`)
        .send(projectData)
        .expect(201);

      expect(response.body).toMatchObject({
        name: projectData.name,
        location: projectData.location,
        timeframe: projectData.timeframe,
        status: 'draft'
      });

      // Cleanup
      await prisma.project.delete({ where: { id: response.body.id } });
    });

    it('should reject unauthorized requests', async () => {
      await request(app)
        .post('/api/projects')
        .send({ name: 'Test' })
        .expect(401);
    });
  });
});
```

### Frontend Testing

#### Jest Setup (frontend/src/setupTests.ts)

```typescript
import '@testing-library/jest-dom';
import { server } from './mocks/server';

// MSW Setup
beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());

// Mock localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
};
global.localStorage = localStorageMock as any;

// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});
```

#### MSW Mocks (frontend/src/mocks/handlers.ts)

```typescript
import { rest } from 'msw';

export const handlers = [
  rest.get('/api/projects', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json({
        projects: [
          {
            id: '1',
            name: 'Test Project',
            location: 'M√ºnchen',
            status: 'draft',
            createdAt: new Date().toISOString()
          }
        ]
      })
    );
  }),

  rest.post('/api/projects', (req, res, ctx) => {
    const { name } = req.body as any;
    
    return res(
      ctx.status(201),
      ctx.json({
        id: '2',
        name,
        status: 'draft',
        createdAt: new Date().toISOString()
      })
    );
  }),

  rest.post('/api/auth/login', async (req, res, ctx) => {
    const { email, password } = await req.json();
    
    if (email === 'test@example.com' && password === 'password123') {
      return res(
        ctx.status(200),
        ctx.json({
          accessToken: 'mock-access-token',
          refreshToken: 'mock-refresh-token',
          user: {
            id: '1',
            email: 'test@example.com',
            companyName: 'Test Company',
            role: 'user'
          }
        })
      );
    }
    
    return res(
      ctx.status(401),
      ctx.json({ error: 'Invalid credentials' })
    );
  })
];
```

#### Component Test (frontend/src/components/__tests__/ProjectCard.test.tsx)

```typescript
import { render, screen, fireEvent } from '@testing-library/react';
import { ProjectCard } from '../ProjectCard';

describe('ProjectCard', () => {
  const mockProject = {
    id: '1',
    name: 'Test Project',
    location: 'M√ºnchen',
    timeframe: '01.08.2025 - 31.12.2025',
    status: 'analyzed' as const,
    createdAt: '2025-06-17',
    totalPrice: 125000,
    positionsCount: 24
  };

  const mockOnClick = jest.fn();

  beforeEach(() => {
    mockOnClick.mockClear();
  });

  it('renders project information correctly', () => {
    render(<ProjectCard project={mockProject} onClick={mockOnClick} />);
    
    expect(screen.getByText('Test Project')).toBeInTheDocument();
    expect(screen.getByText('M√ºnchen')).toBeInTheDocument();
    expect(screen.getByText('01.08.2025 - 31.12.2025')).toBeInTheDocument();
    expect(screen.getByText('24 Positionen')).toBeInTheDocument();
    expect(screen.getByText('125.000 ‚Ç¨')).toBeInTheDocument();
  });

  it('displays correct status badge', () => {
    render(<ProjectCard project={mockProject} onClick={mockOnClick} />);
    
    const statusBadge = screen.getByText('Analysiert');
    expect(statusBadge).toHaveClass('bg-blue-100', 'text-blue-700');
  });

  it('calls onClick when clicked', () => {
    render(<ProjectCard project={mockProject} onClick={mockOnClick} />);
    
    fireEvent.click(screen.getByRole('button'));
    expect(mockOnClick).toHaveBeenCalledTimes(1);
  });
});
```

#### E2E Test mit Cypress (frontend/cypress/e2e/project-workflow.cy.ts)

```typescript
describe('Project Workflow', () => {
  beforeEach(() => {
    cy.login('test@example.com', 'password123');
    cy.visit('/');
  });

  it('should create and analyze a project', () => {
    // Create new project
    cy.findByText('Neues Projekt').click();
    
    // Fill in tender URL
    cy.findByLabelText('URL der Ausschreibung').type('https://www.evergabe.de/12345');
    
    // Start analysis
    cy.findByText('Ausschreibung analysieren').click();
    
    // Wait for analysis to complete
    cy.findByText('Analyse l√§uft...', { timeout: 10000 }).should('exist');
    cy.findByText('Leistungsverzeichnis', { timeout: 30000 }).should('exist');
    
    // Check that positions were generated
    cy.findByText('Trockenbau - St√§nderw√§nde').should('exist');
    cy.findByText('Wandanstrich').should('exist');
    
    // Navigate to calculation
    cy.findByText('Kalkulation').click();
    
    // Select pricing strategy
    cy.findByText('g√ºnstig').click();
    
    // Check that prices are updated
    cy.findByText('Angebotssumme netto:').parent().should('contain', '‚Ç¨');
    
    // Export as PDF
    cy.findByText('Export').click();
    cy.findByText('PDF').click();
    cy.findByText('Als PDF exportieren').click();
    
    // Verify download started
    cy.findByText('Export wird vorbereitet...').should('exist');
  });
});
```

## üöÄ CI/CD Pipeline

### GitHub Actions (.github/workflows/ci.yml)

```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run linter
        working-directory: ./backend
        run: npm run lint
      
      - name: Setup database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
        run: |
          npx prisma migrate deploy
          npx prisma generate
      
      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: npm test -- --coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linter
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  # E2E Tests
  e2e-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30 # Wait for services to be ready
      
      - name: Run Cypress tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: ./frontend
          start: npm run start:test
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
      
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots

  # Build and Push Docker Images
  build-docker:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/lv-generator-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/lv-generator-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/lv-generator-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/lv-generator-frontend:${{ github.sha }}
          build-args: |
            REACT_APP_API_URL=${{ secrets.PRODUCTION_API_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production
  deploy:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Railway
        uses: berviantoleo/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: lv-generator
      
      - name: Run database migrations
        run: |
          railway run --service=backend npx prisma migrate deploy
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'LV-Generator deployed to production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
```

## üê≥ Production Dockerfiles

### Backend Dockerfile (backend/Dockerfile)

```dockerfile
# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install dependencies
RUN npm ci --only=production
RUN npm install -g @prisma/client
RUN npx prisma generate

# Copy source code
COPY . .

# Build TypeScript
RUN npm run build

# Production stage
FROM node:18-alpine

WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js

# Start application with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/server.js"]
```

### Frontend Dockerfile (frontend/Dockerfile)

```dockerfile
# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Build arguments
ARG REACT_APP_API_URL
ENV REACT_APP_API_URL=$REACT_APP_API_URL

# Build application
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy custom nginx config
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built application
COPY --from=builder /app/build /usr/share/nginx/html

# Add health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
```

### Nginx Configuration (frontend/nginx.conf)

```nginx
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    sendfile on;
    tcp_nopush on;
    keepalive_timeout 65;
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml;
    
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        
        # Cache static assets
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # React app
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # API proxy (optional, if not using CORS)
        location /api {
            proxy_pass http://backend:3001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
```

## üîí Security Configuration

### Helmet Configuration (backend/src/config/security.ts)

```typescript
import helmet from 'helmet';
import { Express } from 'express';

export function configureSecurity(app: Express) {
  // Basic security headers
  app.use(helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        scriptSrc: ["'self'"],
        imgSrc: ["'self'", "data:", "https:"],
        connectSrc: ["'self'"],
        fontSrc: ["'self'"],
        objectSrc: ["'none'"],
        mediaSrc: ["'self'"],
        frameSrc: ["'none'"],
      },
    },
    hsts: {
      maxAge: 31536000,
      includeSubDomains: true,
      preload: true
    }
  }));

  // Additional security measures
  app.disable('x-powered-by');
  
  // Trust proxy (for deployment behind reverse proxy)
  app.set('trust proxy', 1);
}
```

### Environment Variables Validation (backend/src/config/env.ts)

```typescript
import { cleanEnv, str, port, url, bool, num } from 'envalid';

export const env = cleanEnv(process.env, {
  NODE_ENV: str({ choices: ['development', 'test', 'production'] }),
  PORT: port({ default: 3001 }),
  DATABASE_URL: url(),
  REDIS_URL: url(),
  JWT_SECRET: str(),
  JWT_EXPIRES_IN: str({ default: '7d' }),
  REFRESH_TOKEN_EXPIRES_IN: str({ default: '30d' }),
  
  OPENAI_API_KEY: str(),
  ANTHROPIC_API_KEY: str({ default: '' }),
  
  AWS_ACCESS_KEY_ID: str(),
  AWS_SECRET_ACCESS_KEY: str(),
  AWS_REGION: str({ default: 'eu-central-1' }),
  S3_BUCKET_NAME: str(),
  
  SENDGRID_API_KEY: str(),
  EMAIL_FROM: str({ default: 'noreply@lv-generator.com' }),
  
  FRONTEND_URL: url(),
  
  RATE_LIMIT_WINDOW: num({ default: 900000 }), // 15 minutes
  RATE_LIMIT_MAX: num({ default: 100 }),
  
  ENABLE_SWAGGER: bool({ default: false }),
  LOG_LEVEL: str({ default: 'info', choices: ['error', 'warn', 'info', 'debug'] }),
});
```

## üìä Monitoring Setup

### Logging Configuration (backend/src/utils/logger.ts)

```typescript
import winston from 'winston';
import { env } from '../config/env';

const format = winston.format.combine(
  winston.format.timestamp(),
  winston.format.errors({ stack: true }),
  winston.format.json()
);

export const logger = winston.createLogger({
  level: env.LOG_LEVEL,
  format,
  defaultMeta: { service: 'lv-generator' },
  transports: [
    new winston.transports.File({ 
      filename: 'logs/error.log', 
      level: 'error' 
    }),
    new winston.transports.File({ 
      filename: 'logs/combined.log' 
    })
  ]
});

if (env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.combine(
      winston.format.colorize(),
      winston.format.simple()
    )
  }));
}

// Log unhandled errors
process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
});
```

### Health Check Endpoint (backend/src/utils/healthcheck.js)

```javascript
const http = require('http');

const options = {
  host: 'localhost',
  port: process.env.PORT || 3001,
  path: '/health',
  timeout: 2000
};

const healthCheck = http.request(options, (res) => {
  console.log(`STATUS: ${res.statusCode}`);
  if (res.statusCode == 200) {
    process.exit(0);
  } else {
    process.exit(1);
  }
});

healthCheck.on('error', (err) => {
  console.error('ERROR:', err);
  process.exit(1);
});

healthCheck.end();
```

---

Mit diesem umfassenden Setup haben Sie nun:

1. ‚úÖ Vollst√§ndige Test-Abdeckung (Unit, Integration, E2E)
2. ‚úÖ CI/CD Pipeline mit GitHub Actions
3. ‚úÖ Production-ready Docker Images
4. ‚úÖ Sicherheitskonfiguration
5. ‚úÖ Monitoring und Logging
6. ‚úÖ Health Checks
7. ‚úÖ Umgebungsvariablen-Validierung

Das Projekt ist bereit f√ºr die Produktion! üöÄ
